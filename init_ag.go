// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package fins

import (
	"errors"
	"fmt"
)

const (
	// MemoryAreaCIOBit is a MemoryArea of type CIOBit.
	MemoryAreaCIOBit MemoryArea = 48
	// MemoryAreaWBit is a MemoryArea of type WBit.
	MemoryAreaWBit MemoryArea = 49
	// MemoryAreaHBit is a MemoryArea of type HBit.
	MemoryAreaHBit MemoryArea = 50
	// MemoryAreaABit is a MemoryArea of type ABit.
	MemoryAreaABit MemoryArea = 51
	// MemoryAreaCIOWord is a MemoryArea of type CIOWord.
	MemoryAreaCIOWord MemoryArea = 176
	// MemoryAreaWWord is a MemoryArea of type WWord.
	MemoryAreaWWord MemoryArea = 177
	// MemoryAreaHWord is a MemoryArea of type HWord.
	MemoryAreaHWord MemoryArea = 178
	// MemoryAreaAWord is a MemoryArea of type AWord.
	MemoryAreaAWord MemoryArea = 179
)

var ErrInvalidMemoryArea = errors.New("not a valid MemoryArea")

var _MemoryAreaName = "CIOBitWBitHBitABitCIOWordWWordHWordAWord"

var _MemoryAreaMapName = map[MemoryArea]string{
	MemoryAreaCIOBit:  _MemoryAreaName[0:6],
	MemoryAreaWBit:    _MemoryAreaName[6:10],
	MemoryAreaHBit:    _MemoryAreaName[10:14],
	MemoryAreaABit:    _MemoryAreaName[14:18],
	MemoryAreaCIOWord: _MemoryAreaName[18:25],
	MemoryAreaWWord:   _MemoryAreaName[25:30],
	MemoryAreaHWord:   _MemoryAreaName[30:35],
	MemoryAreaAWord:   _MemoryAreaName[35:40],
}

// Name is the attribute of MemoryArea.
func (x MemoryArea) Name() string {
	if v, ok := _MemoryAreaMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("MemoryArea(%d).Name", x)
}

var _MemoryAreaMapSize = map[MemoryArea]int{
	MemoryAreaCIOBit:  1,
	MemoryAreaWBit:    1,
	MemoryAreaHBit:    1,
	MemoryAreaABit:    1,
	MemoryAreaCIOWord: 2,
	MemoryAreaWWord:   2,
	MemoryAreaHWord:   2,
	MemoryAreaAWord:   2,
}

// Size is the attribute of MemoryArea.
func (x MemoryArea) Size() int {
	if v, ok := _MemoryAreaMapSize[x]; ok {
		return v
	}
	return 0
}

var _MemoryAreaMapAreaName = map[MemoryArea]string{
	MemoryAreaCIOBit:  "CIO",
	MemoryAreaWBit:    "W",
	MemoryAreaHBit:    "H",
	MemoryAreaABit:    "A",
	MemoryAreaCIOWord: "CIO",
	MemoryAreaWWord:   "W",
	MemoryAreaHWord:   "H",
	MemoryAreaAWord:   "A",
}

// AreaName is the attribute of MemoryArea.
func (x MemoryArea) AreaName() string {
	if v, ok := _MemoryAreaMapAreaName[x]; ok {
		return v
	}
	return fmt.Sprintf("MemoryArea(%d).AreaName", x)
}

var _MemoryAreaMapDateType = map[MemoryArea]string{
	MemoryAreaCIOBit:  "Bit",
	MemoryAreaWBit:    "Bit",
	MemoryAreaHBit:    "Bit",
	MemoryAreaABit:    "Bit",
	MemoryAreaCIOWord: "Word",
	MemoryAreaWWord:   "Word",
	MemoryAreaHWord:   "Word",
	MemoryAreaAWord:   "Word",
}

// DateType is the attribute of MemoryArea.
func (x MemoryArea) DateType() string {
	if v, ok := _MemoryAreaMapDateType[x]; ok {
		return v
	}
	return fmt.Sprintf("MemoryArea(%d).DateType", x)
}

// Val is the attribute of MemoryArea.
func (x MemoryArea) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MemoryArea) IsValid() bool {
	_, ok := _MemoryAreaMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x MemoryArea) String() string {
	return x.Name()
}

var _MemoryAreaNameMap = map[string]MemoryArea{
	_MemoryAreaName[0:6]:   MemoryAreaCIOBit,
	_MemoryAreaName[6:10]:  MemoryAreaWBit,
	_MemoryAreaName[10:14]: MemoryAreaHBit,
	_MemoryAreaName[14:18]: MemoryAreaABit,
	_MemoryAreaName[18:25]: MemoryAreaCIOWord,
	_MemoryAreaName[25:30]: MemoryAreaWWord,
	_MemoryAreaName[30:35]: MemoryAreaHWord,
	_MemoryAreaName[35:40]: MemoryAreaAWord,
}

// ParseMemoryArea converts a string to a MemoryArea.
func ParseMemoryArea(value string) (MemoryArea, error) {
	if x, ok := _MemoryAreaNameMap[value]; ok {
		return x, nil
	}
	return MemoryArea(0), fmt.Errorf("%s is %w", value, ErrInvalidMemoryArea)
}
